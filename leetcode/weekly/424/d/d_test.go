// Generated by copypasta/template/leetcode/generator_test.go
package main

import (
	"github.com/EndlessCheng/codeforces-go/leetcode/testutil"
	testutil2 "github.com/EndlessCheng/codeforces-go/main/testutil"
	"slices"
	"testing"
)

func Test_d(t *testing.T) {
	if err := testutil.RunLeetCodeFuncWithFile(t, minDifference, "d.txt", 0); err != nil {
		t.Fatal(err)
	}
}
// https://leetcode.cn/contest/weekly-contest-424/problems/minimize-the-maximum-adjacent-element-difference/
// https://leetcode.cn/problems/minimize-the-maximum-adjacent-element-difference/

func TestCompareInf(_t *testing.T) {
	return
	testutil.DebugTLE = 0
	rg := testutil2.NewRandGenerator()
	const mx = 7
	inputGenerator := func() (a []int) {
		//return
		rg.Clear()
		n := rg.Int(1,6)
		a = rg.IntSlice(n, -1, mx)
		for i := range a {
			if a[i] == 0 {
				a[i] = -1
			}
		}
		return
	}

	runAC := func(a []int) (ans int) {
		a = slices.Clone(a)
		// 若要修改 a，必须先 copy 一份，在 copied 上修改
		ans = 1e9
		for x := 1; x <= mx; x++ {
			for y := 1; y <= mx; y++ {
				var f func(int)
				f = func(i int) {
					if i == len(a) {
						mx := 0
						for i := 1; i < len(a); i++ {
							v, w := a[i-1], a[i]
							mx = max(mx, abs(v-w))
						}
						ans = min(ans, mx)
						return
					}

					if a[i] != -1 {
						f(i + 1)
						return
					}

					a[i] = x
					f(i + 1)

					a[i] = y
					f(i + 1)
					a[i] = -1
				}
				f(0)
			}
		}
		return
	}

	// test examples first
	//if err := testutil.RunLeetCodeFuncWithFile(_t, runAC, "d.txt", 0); err != nil {
	//	_t.Fatal(err)
	//}
	//return

	testutil.CompareInf(_t, inputGenerator, runAC, minDifference)
}
