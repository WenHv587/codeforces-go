// Generated by copypasta/template/generator_test.go
package main

import (
	. "fmt"
	"github.com/EndlessCheng/codeforces-go/main/testutil"
	"io"
	"testing"
)

// https://codeforces.com/problemset/problem/1029/E
// https://codeforces.com/problemset/status/1029/problem/E
func Test_cf1029E(t *testing.T) {
	testCases := [][2]string{
		{
			`7
1 2
2 3
2 4
4 5
4 6
5 7`,
			`2`,
		},
		{
			`7
1 2
1 3
2 4
2 5
3 6
1 7`,
			`0`,
		},
		{
			`7
1 2
2 3
3 4
3 5
3 6
3 7`,
			`1`,
		},
		{
			`6
1 2
2 3
3 4
4 5
5 6`,
			`1`,
		},
	}
	testutil.AssertEqualStringCase(t, testCases, 0, cf1029E)
}

func TestCompare_cf1029E(_t *testing.T) {
	return
	testutil.DebugTLE = 0
	rg := testutil.NewRandGenerator()
	inputGenerator := func() string {
		//return ``
		rg.Clear()
		n := rg.Int(1, 20)
		rg.NewLine()
		rg.TreeEdges(n, 1)
		return rg.String()
	}
	
	runBF := func(in io.Reader, out io.Writer) {
		var n int
		Fscan(in, &n)
		g := make([][]int, n+1)
		for i := 1; i < n; i++ {
			var v, w int
			Fscan(in, &v, &w)
			g[v] = append(g[v], w)
			g[w] = append(g[w], v)
		}
		ans := 0
		var dfs func(node, father int) int
		dfs = func(node, father int) int {
			dis := 2
			for _, to := range g[node] {
				if to == father {
					continue
				}
				dis = min(dis, dfs(to, node))
			}
			if dis == 0 && father != 1 {
				ans++
			}
			return (dis + 1) % 3
		}
		dfs(1, 1)
		Fprintln(out, ans)
	}
	testutil.AssertEqualRunResultsInf(_t, inputGenerator, runBF, cf1029E)
}
