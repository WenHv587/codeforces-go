// Generated by copypasta/template/generator_test.go
package main

import (
	. "fmt"
	"github.com/EndlessCheng/codeforces-go/main/testutil"
	"io"
	"testing"
)

// https://codeforces.com/problemset/problem/761/D
// https://codeforces.com/problemset/status/761/problem/D
func Test_cf761D(t *testing.T) {
	testCases := [][2]string{
		{
			`5 1 5
1 1 1 1 1
3 1 5 4 2`,
			`3 1 5 4 2`,
		},
		{
			`4 2 9
3 4 8 9
3 2 1 4`,
			`2 2 2 9`,
		},
		{
			`6 1 5
1 1 1 1 1 1
2 3 5 4 1 6`,
			`-1`,
		},
		{
			`4 1 4
1 1 2 4
3 4 1 2`,
			``,
		},
	}
	testutil.AssertEqualStringCase(t, testCases, 0, cf761D)
}

func TestCompare_cf761D(_t *testing.T) {
	//return
	testutil.DebugTLE = 0
	rg := testutil.NewRandGenerator()
	inputGenerator := func() string {
		//return ``
		rg.Clear()
		n := rg.Int(1, 4)
		l := rg.Int(1, 1)
		r := rg.Int(1, 5)
		rg.NewLine()
		rg.IntSlice(n, l, r)
		rg.Permutation(1, n)
		return rg.String()
	}

	// 暴力算法
	runBF := func(in io.Reader, out io.Writer) {
		var n, l, r int
		Fscan(in, &n, &l, &r)
		a := make([]int, n)
		for i := range a {
			Fscan(in, &a[i])
		}
		p := make([]int, n)
		for i := range p {
			Fscan(in, &p[i])
		}

		ans := make([]int, n)
		index := map[int]int{}
		for i := 0; i < n; i++ {
			index[p[i]] = i
		}

		old := 0
		for i := 1; i <= n; i++ {
			q := index[i]
			y := l
			if i > 1 {
				y = old - (l - a[q]) + l + 1
			}
			if y > r {
				Fprint(out, -1)
				return
			}
			if y < l {
				y = l
			}

			ans[q] = y
			old = y - a[q]
		}
		//for _, v := range ans {
		//	Fprint(out, v, " ")
		//}
	}

	testutil.AssertEqualRunResultsInf(_t, inputGenerator, runBF, cf761D)
}
