// Generated by copypasta/template/generator_test.go
package main

import (
	"fmt"
	"github.com/EndlessCheng/codeforces-go/main/testutil"
	"io"
	"testing"
)

// https://codeforces.com/problemset/problem/1503/D
// https://codeforces.com/problemset/status/1503/problem/D
func Test_cf1503D(t *testing.T) {
	testCases := [][2]string{
		{
			`5
3 10
6 4
1 9
5 8
2 7`,
			`2`,
		},
		{
			`2
1 2
3 4`,
			`-1`,
		},
		{
			`3
1 2
3 6
4 5`,
			`-1`,
		},
		{
			`6
10 1
7 5
11 6
9 4
8 2
12 3`,
			`-1`,
		},
		{
			`2
1 4
3 2`,
			`0`,
		},
	}
	testutil.AssertEqualStringCase(t, testCases, 0, cf1503D)
}

func TestCompare_cf1503D(_t *testing.T) {
	//return
	testutil.DebugTLE = 0
	rg := testutil.NewRandGenerator()
	inputGenerator := func() string {
		//return ``
		rg.Clear()
		n := rg.Int(1, 7)
		rg.NewLine()
		rg.Permutation(1, n*2)
		return rg.String()
	}

	// 暴力算法
	runBF := func(in io.Reader, out io.Writer) {
		var n int
		fmt.Fscan(in, &n)
		P := make([][]int, n)
		for i := range P {
			var x, y int
			fmt.Fscan(in, &x,&y)
			P[i] = []int{x,y}
		}
		
		f := make([]int, n+1)
		c := make([]int, n+1)
		for i := 0; i < n; i++ {
			a := P[i][0]
			b := P[i][1]
			var cost int
			if a > b {
				a, b = b, a
				cost = 1
			}
			if a > n {
				fmt.Fprint(out, -1)
				return
			}
			f[a] = b
			c[a] = cost
		}

		suf_max := make([]int, n+2)
		suf_max[n+1] = -1
		for i := n; i > 0; i-- {
			suf_max[i] = max(suf_max[i+1], f[i])
		}

		prev_min := int(1e9)
		var cost0, cost1 int
		var ans int
		seq0 := []int{}
		seq1 := []int{}

		for i := 1; i <= n; i++ {
			prev_min = min(prev_min, f[i])
			if len(seq0) == 0 || f[seq0[len(seq0)-1]] > f[i] {
				seq0 = append(seq0, i)
				cost0 += c[i]
			} else if len(seq1) == 0 || f[seq1[len(seq1)-1]] > f[i] {
				seq1 = append(seq1, i)
				cost1 += c[i]
			} else {
				fmt.Fprint(out, -1)
				return
			}

			if prev_min > suf_max[i+1] {
				s0 := len(seq0)
				s1 := len(seq1)
				ans += min(cost0+s1-cost1, cost1+s0-cost0)
				cost0 = 0
				cost1 = 0
				seq0 = nil
				seq1 = nil
			}
		}
		fmt.Fprint(out, ans)
	}

	testutil.AssertEqualRunResultsInf(_t, inputGenerator, runBF, cf1503D)
}
