// Generated by copypasta/template/generator_test.go
package main

import (
	. "fmt"
	"github.com/EndlessCheng/codeforces-go/main/testutil"
	"io"
	"slices"
	"testing"
)

// https://codeforces.com/problemset/problem/1902/D
// https://codeforces.com/problemset/status/1902/problem/D
func Test_cf1902D(t *testing.T) {
	testCases := [][2]string{
		{
			`8 3
RDLLUURU
-1 2 1 7
0 0 3 4
0 1 7 8`,
			`YES
YES
NO`,
		},
		{
			`4 2
RLDU
0 0 2 2
-1 -1 2 3`,
			`YES
NO`,
		},
		{
			`10 6
DLUDLRULLD
-1 0 1 10
-1 -2 2 5
-4 -2 6 10
-1 0 3 9
0 1 4 7
-3 -1 5 8`,
			`YES
YES
YES
NO
YES
YES`,
		},
		{
			`3 1
LUD
0 -1 1 1`,
			`NO`,
		},
	}
	testutil.AssertEqualStringCase(t, testCases, 0, cf1902D)
}

func TestCompare_cf1902D(_t *testing.T) {
	//return
	testutil.DebugTLE = 0
	rg := testutil.NewRandGenerator()
	inputGenerator := func() string {
		//return ``
		rg.Clear()
		n := rg.Int(1, 9)
		rg.Int(1,1)
		rg.NewLine()
		rg.StrInSet(n,n, "LRDU")
		rg.NewLine()
		rg.Int(-3,3)
		rg.Int(-3,3)
		l := rg.Int(1,n)
		rg.Int(l, n)
		return rg.String()
	}
	type pair struct{ x, y int }
	dirs := []pair{'L': {-1, 0}, 'R': {1, 0}, 'D': {0, -1}, 'U': {0, 1}}
	// 暴力算法
	runBF := func(in io.Reader, out io.Writer) {
		var n, q int
		var s string
		Fscan(in, &n, &q, &s)
	o:	for;q>0;q-- {
			var x,y,l,r int
			Fscan(in, &x, &y, &l, &r)
			if x == 0 && y == 0 {
				Fprintln(out, "YES")
				continue
			}
			t := []byte(s)
			slices.Reverse(t[l-1 : r])
			cx,cy := 0,0
			for _, b := range t {
				cx += dirs[b].x
				cy += dirs[b].y
				if cx == x && cy==y {
					Fprintln(out, "YES")
					continue o
				}
			}
			Fprintln(out, "NO")
		}
		
	}

	testutil.AssertEqualRunResultsInf(_t, inputGenerator, runBF, cf1902D)
}
