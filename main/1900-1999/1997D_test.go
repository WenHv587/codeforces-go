// Generated by copypasta/template/generator_test.go
package main

import (
	"fmt"
	"github.com/EndlessCheng/codeforces-go/main/testutil"
	"io"
	"strings"
	"testing"
)

// https://codeforces.com/problemset/problem/1997/D
// https://codeforces.com/problemset/status/1997/problem/D
func Test_cf1997D(t *testing.T) {
	testCases := [][2]string{
		{
			`3
4
0 1 0 2
1 1 3
2
3 0
1
5
2 5 3 9 6
3 1 5 2`,
			`1
3
6`,
		},
	}
	testutil.AssertEqualStringCase(t, testCases, 0, cf1997D)
}

func TestCompare_cf1997D(_t *testing.T) {
	return
	testutil.DebugTLE = 0
	rg := testutil.NewRandGenerator()
	inputGenerator := func() string {
		//return ``
		rg.Clear()
		rg.One()
		n := rg.Int(2,100)
		rg.NewLine()
		rg.IntSlice(n, 1e9-10,1e9)
		for i := 2; i <= n; i++ {
			rg.Int(1, i-1)
		}
		rg.NewLine()
		return rg.String()
	}
	const Infinity = int(^uint(0) >> 1)
	// 暴力算法
	runBF := func(in io.Reader, out io.Writer) {
		solve := func(Case int) {
			var n int
			fmt.Fscan(in, &n)
			a := make([]int, n)
			for i := 0; i < n; i++ {
				fmt.Fscan(in, &a[i])
			}
			g := make([][]int, n)
			for i := 0; i < n-1; i++ {
				var p int
				fmt.Fscan(in, &p)
				p--

				g[p] = append(g[p], i+1)
			}

			var dfs func(int)
			dfs = func(u int) {
				mn := Infinity
				for _, v := range g[u] {
					dfs(v)
					mn = min(mn, a[v])
				}

				if mn < a[u] {
					if u == 0 {
						a[u] += mn
					} else {
						a[u] = mn
					}
				} else if mn != Infinity {
					if u == 0 {
						a[u] += mn
					} else {
						a[u] += (mn - a[u]) / 2
					}
				}
			}
			dfs(0)

			fmt.Fprintln(out, a[0])
		}

		T := 1
		fmt.Fscan(in, &T) 
		for Case := 1; Case <= T; Case++ {
			solve(Case)
		}

		_leftData, _ := io.ReadAll(in)
		if _s := strings.TrimSpace(string(_leftData)); _s != "" {
			panic("有未读入的数据：\n" + _s)
		}
	}

	testutil.AssertEqualRunResultsInf(_t, inputGenerator, runBF, cf1997D)
}
